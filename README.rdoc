= Velocity

Provides a barebones, but supremely quick way of querying your ActiveRecord database.

Velocity uses adapter-specific optimizations (only pg, and mysql2 support planned for now) to reduce memory consumption
and processing time **significantly** when working with large amounts of data. This is typically useful in situations like reporting or
cached web services where you just need quick access to the rows in your database.

IMPORTANT: This is a work in progress, no version has been released yet.

== How to

Include the query module into your ActiveRecord model

  class Foo < ActiveRecord::Base
    include Velocity::Query
  end
  
This adds a .data() method onto your model class. Use this pretty much like the ActiveRecord 3 query interface.

  Foo.data.where(:designation => 'Superfoo').limit(1000).order('name ASC').each do |foo|
    puts foo.title
  end
  
What should immediately apparent is that rather than getting a list of ActiveRecord model instances (i.e. Foo), you get an
iterator object. This object consists of accessor methods reflecting all the fields in your query.

== Contributing to velocity
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Pascal Houliston. See LICENSE.txt for
further details.

